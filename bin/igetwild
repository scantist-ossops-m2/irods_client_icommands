#!/bin/bash -e

# Simple script that does some wildcard processing to iget irods files
# with names with entered patterns in the names (at the beginning,
# end or middle).
#
# For example:
# igetwild /newZone/home/rods .txt e
# will get each irods file that ends with '.txt' in the collection.
#
#igetwild /newZone/home/rods .txt e
#   foo.txt                         0.000 MB | 0.164 sec | 0 thr |  0.000 MB/s
#   foo2.txt                        0.000 MB | 0.101 sec | 0 thr |  0.000 MB/s
#
# Include the collection name, the pattern of the dataObject
# names and b, e, or m on the command line, to avoid prompts for them.


if [ "$1" ]; then
  collName="$1"
else
  echo "This simple script allows you to iget a set of files"
  echo "using wildcard type matching on file names."
  echo "This is just a interim partial solution while we develop a more"
  echo "comprehensive approach, but may be useful to some."
  echo "You can enter the arguments on the command-line if you'd prefer."
  echo "Also see 'igetwild -h'."
  printf "Please enter the collection to iget from: "
  read collName
fi

if [ "$collName" = "-h" ]; then
  echo "Get one or more iRODS files using wildcard characters."
  echo "Usage: igetwild collection pattern b|m|e  (beginning, middle, or end)"
  echo "Will prompt for missing items."
  echo ""
  ienv -h | tail -n1 | sed -e 's/ienv/igetwild/'
  exit 0
fi

tmpFile1=$(mktemp -t irods_tmp_igetwild1.XXXXXX)
tmpFile2=$(mktemp -t irods_tmp_igetwild2.XXXXXX)
tmpFile3=$(mktemp -t irods_tmp_igetwild3.XXXXXX)
#clean up tmpfiles on error
trap 'rm -f $tmpFile1 $tmpFile2 $tmpFile3' ERR

if [ "$2" ]; then
  matchPattern="$2"
else
  printf "Please enter the pattern in the file names to iget (just the text): "
  read matchPattern
fi

matchPosition=e
if [ "$3" ]; then
  matchPosition="$3"
else
  printf "Should this be at the beginning, middle, or end of the names? [b m e]: "
  read matchPosition
fi

#iquest doesn't have -0; the only character not in filenames is /, so ask
#iquest to return answers delimited with /\n [we can't avoid the \n-delimiter]
if [ "$matchPosition" = "b" ]; then
  iquest "$collName/%s/" "select DATA_NAME where COLL_NAME = '$collName' and DATA_NAME like '$matchPattern%'" > "$tmpFile1"
elif [ "$matchPosition" = "m" ]; then
  iquest "$collName/%s/" "select DATA_NAME where COLL_NAME = '$collName' and DATA_NAME like '%$matchPattern%'" > "$tmpFile1"
elif [ "$matchPosition" = "e" ]; then
  iquest "$collName/%s/" "select DATA_NAME where COLL_NAME = '$collName' and DATA_NAME like '%$matchPattern'" > "$tmpFile1"
else
  echo "matchPosition must be one of [b|m|e]"
  exit 1
fi

#We now want to convert "/\n" to the 0 byte. The first sed rune
#appends every line to the pattern space (ba -> go to branch point a ;
#:a -> label of branch a), then performs the substitution.
#Alas, sed can't see the final newline, so it leaves the final / in place
#So the second sed rune replaces that final / with the 0 byte.

<"$tmpFile1" sed -e ':a;{N;s,/\n,\x0,g};ba' | sed -e 's,/$,\x0,' >"$tmpFile2"

#That, though, does leave the final newline in place (unavoidable in
#sed), so we remove it using "head"; -c-1 prints everything except the
#final character.

head -c-1 "$tmpFile2" >"$tmpFile3"

#-0 "use 0 byte as record separator" -n1 "only pass iget one argument at a time"
xargs -a "$tmpFile3" -0 -n1 iget -v

rm -f "$tmpFile1" "$tmpFile2" "$tmpFile3"
